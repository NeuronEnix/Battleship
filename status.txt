MileStone:
    | - base
    | - base grid
    | - ship dragble
    | - ship rotation within the base
    | - adding crosshair
    | - adding smoke
    | - adding explosion
    | - adding missfire
    | - mass explosion
    | - adding sound
    | - intro
    | - Menu (main_menu)
    x - batches
    x - Scaling all models based on xy and wh

Working on:
    - adding lan


Commit:
    - changed code structure
        - GameModel <- Explosion
        - GameModel <- Ship
        - GameModel <- Player
    - SidePanel.py
    - Added GameMaster
        - Controls gameplay ( not done )
        - Need seriouse refactor
    - Added quad to model.py
    - Quads can be added to batch retaining blending

    - audio has to be corrected
    - In Menu.py  PauseMenu needs rework at key press


Note :
    - GameMaster.py is a mess needs refactoring
        -specially def setBattleField


Multiplayer
    init()
        self.gm = GM()
        self.gm.setP1()

    press():
        status = gm.press()
        if ststus == playing :
            
        self.status == playerSetup :
           doSetupStuffs()



    setupStuffs:
     if status == gs.playerSetupConfirm
                self.gm.setP2()
            else:
                self.p1 = self.gm.player[0].archive
                self.p2 = self.gm.player[1].archive
                self.gm.setBattlefield(self.p1,self.p2)









Mouse Pointer :
    Defaults:
        cursor = window.get_system_mouse_cursor(win.CURSOR_HELP)
        window.set_mouse_cursor(cursor)
    Custom:
        image = pyglet.image.load('cursor.png')
        cursor = pyglet.window.ImageMouseCursor(image, 16, 8)
        window.set_mouse_cursor(cursor)

def makeBatch( groupList ) :
    batch = pyGra.Batch()
    for i in range( len( groupList ) ):
        groupID = pyGra.OrderedGroup( i )
        for model in groupList[ i ] :
            model.group = groupID
            model.batch = batch
    return batch

Ready!
self.qxy = [1188, 2]
self.qwh = [172, 80]
self.txy = [31, 21]
self.dd()
def dd( self ) :
    self.lb = py.text.Label('Ready!',
                  font_name='Times New Roman',
                  font_size=30,
                  x=self.qxy[0]+self.txy[0],
                  y=self.qxy[1] +self.txy[1])
    self.qd = Quad( self.qxy, self.qwh )
